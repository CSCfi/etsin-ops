user nginx;
worker_processes auto;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 768;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log on;
    access_log  /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;
    server_tokens       off;

    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    proxy_cookie_path / "/; HTTPOnly; Secure";

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    # `gzip` Settings
    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

    # Match allowed origins for cross-origin API requests
    map $http_origin $allow_origin {
        https://{{ server_domain_name }} $http_origin;
{% if server_qvain_domain_name is not undefined %}
        https://{{ server_qvain_domain_name }} $http_origin;
{% endif %}
    }

    # server {
    #     # handle unknown domain names or Host header values
    #     listen 80 default_server;
    #     return 444;
    # }

    # server {
    #     # handle unknown domain names or Host header values
    #     listen 443 ssl http2 default_server;
    #     listen [::]:443 ssl http2 default_server;
    #     ssl_protocols TLSv1.1 TLSv1.2;
    #     ssl_prefer_server_ciphers on;
    #     ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    #     ssl_ecdh_curve secp384r1;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_tickets off;
    #     ssl_stapling on;
    #     ssl_stapling_verify on;
    #     ssl_certificate {{ ssl_certificates_path }}/{{ ssl_certificate_name }};
    #     ssl_certificate_key {{ ssl_certificates_path }}/{{ ssl_key_name }};
    #     ssl_dhparam {{ ssl_certificates_path }}/{{ nginx_dh_param_name }};
    #     return 444;
    # }

    server {
        # port 80 only redirects to https

        listen 80 default_server;
        server_name {{ server_domain_name }};
        return 301 https://{{ server_domain_name }}$request_uri;
        access_log on;
    }

    upstream elasticsearch {
        keepalive 15;
        server {{ dataserver_1_internal_ip | default('127.0.0.1') }}:{{ elasticsearch.port }} weight=3;
{% if dataserver_2_internal_ip is not undefined %}
        server {{ dataserver_2_internal_ip }}:{{ elasticsearch.port }};
{% endif %}
{% if dataserver_3_internal_ip is not undefined %}
        server {{ dataserver_3_internal_ip }}:{{ elasticsearch.port }};
{% endif %}
    }

{% if server_qvain_domain_name is not undefined %}
    server {
        # redirect Qvain port 80 to https
        listen 80;
        server_name {{ server_qvain_domain_name }};
        return 301 https://{{ server_qvain_domain_name }}$request_uri;
        access_log on;
    }

    server {
        # Qvain https configuration
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name {{ server_qvain_domain_name }};

        include shared_ssl_configurations.conf;
        include server_common.conf;

        ssl_certificate {{ ssl_certificates_path }}/{{ ssl_certificate_name }};
        ssl_certificate_key {{ ssl_certificates_path }}/{{ ssl_key_name }};
        ssl_dhparam {{ ssl_certificates_path }}/{{ nginx_dh_param_name }};

        # Etsin URL should be used for for /api/
        location /api/ {
            return 404;
        }

        location / {
            include shared_headers.conf;
            proxy_pass http://unix:/usr/local/etsin/gunicorn/socket;
            add_header Set-Cookie "etsin_app=qvain; SameSite=Lax; Secure";
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
{% endif %}

    server {
        # Etsin https configuration

        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name {{ server_domain_name }};

        include shared_ssl_configurations.conf;
        include server_common.conf;

        ssl_certificate {{ ssl_certificates_path }}/{{ ssl_certificate_name }};
        ssl_certificate_key {{ ssl_certificates_path }}/{{ ssl_key_name }};
        ssl_dhparam {{ ssl_certificates_path }}/{{ nginx_dh_param_name }};

        location /api/dl {
            # separate block for dl api to not include content-disposition header
            include shared_headers.conf;
            add_header Cache-Control "no-store" always;
            add_header Content-Security-Policy "default-src 'self'";
            add_header Access-Control-Allow-Credentials true;
            add_header Access-Control-Allow-Origin $allow_origin always;
            add_header Access-Control-Allow-Headers 'charset, content-type';

            proxy_pass {{ nginx_gunicorn_proxy_pass }};
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_max_temp_file_size 0;
        }

        location /api/ {
            include shared_headers.conf;
            include api_response_headers.conf;
            proxy_pass {{ nginx_gunicorn_proxy_pass }};
            add_header Access-Control-Allow-Credentials true;
            add_header Access-Control-Allow-Origin $allow_origin always;
            add_header Access-Control-Allow-Headers 'charset, content-type';

            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            include shared_headers.conf;
            proxy_pass {{ nginx_gunicorn_proxy_pass }};
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Google search console ownership verification file
        location /google18c2b346e42a601e.html {
            rewrite ^/(.*)  $1;
            return 200 "google-site-verification: $uri";
        }
    }

    # Redirect from etsin.avointiede.fi (old Etsin) to etsin.fairdata.fi (new Etsin), port 443
    server {
        server_name {{ redirect_server_domain_name }};
        include shared_ssl_configurations.conf;

        listen 80;
        listen 443 ssl;
        ssl_certificate {{ redirect_ssl_certificates_path }}/{{ redirect_ssl_certificate_name }};
        ssl_certificate_key {{ redirect_ssl_certificates_path }}/{{ redirect_ssl_certificate_key_name }};

        return 301 https://{{ server_domain_name }}$request_uri;
    }
}
